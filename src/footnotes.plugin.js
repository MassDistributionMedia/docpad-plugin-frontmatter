// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = function(BasePlugin) {
    var StardogtocPlugin, _ref;
    return StardogtocPlugin = (function(_super) {
      __extends(StardogtocPlugin, _super);

      function StardogtocPlugin() {
        _ref = StardogtocPlugin.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      StardogtocPlugin.prototype.name = 'stardogtoc';

      StardogtocPlugin.prototype.tocHtml = '';

      StardogtocPlugin.prototype.config = {
        regex: /<toc:stardog\/?>/g,
        subsectionSelector: '#mdblock h2',
        addHeaderIds: true,
        headerIdPrefix: 'sd-',
        chapters: [
          {
            title: "Using Stardog",
            subtitle: "Covers basic installation and starting a Stardog Server in <em>five easy steps</em>.",
            sections: [
              {
                title: "The Basics: Query, Write, Search",
                page: "using"
              }, {
                title: "Stardog (Web) Console",
                page: "console"
              }
            ]
          }, {
            title: "Administering Stardog",
            subtitle: "Administering Stardog Server, databases, including configuration and deployment information.",
            sections: [
              {
                title: "Administration",
                page: "admin"
              }, {
                title: "Security",
                page: "security"
              }
            ]
          }, {
            title: "Programming Stardog",
            subtitle: "Everything from reasoning, data validation, and SPARQL to programming Stardog with Java, JavaScript, and many other languages. Includes the documentation for Stardog Web.",
            sections: [
              {
                title: "Programming with Java",
                page: "java"
              }, {
                title: "Building Stardog Web Apps",
                page: "web"
              }, {
                title: "Integrity Constraint Validation",
                page: "icv"
              }, {
                title: "OWL 2 Reasoning",
                page: "owl2"
              }, {
                title: "HTTP Programming",
                page: "http"
              }, {
                title: "Programming with Spring",
                page: "spring"
              }, {
                title: "Programming with Groovy",
                page: "groovy"
              }, {
                title: "Programming with Javascript",
                page: false,
                text: "The documentation for <a href=\"http://clarkparsia.github.io/stardog.js\">stardog.js</a>, which is available on <a href=\"https://github.com/clarkparsia/stardog.js\">Github</a> and <a href=\"http://docs.stardog.com/\">npm</a>."
              }
            ]
          }, {
            title: "Understanding Stardog",
            subtitle: "Background information on tuning, terminology, known issues, compatibility policies, etc.",
            sections: [
              {
                title: "The Man Pages",
                page: "manpages"
              }, {
                title: "Stardog Performance: Benchmarks, Tuning, Tips",
                page: "performance"
              }, {
                title: "Frequently Asked Questions",
                page: "faq"
              }, {
                title: "Stardog Compatibility Policies",
                page: false,
                text: "A statement of the policies we will pursue in evolving Stardog beyond the 1.0 release."
              }, {
                title: "Known Issues",
                page: false,
                text: "Click here first before reporting an issue or bug."
              }, {
                title: "Terminology",
                page: false,
                text: "A glossary of technical terms used in these docs."
              }
            ]
          }
        ]
      };

      StardogtocPlugin.prototype.buildPages = function() {
        var chapter, section, _i, _len, _ref1, _results;
        if (this.built) {
          return;
        }
        this.pages = {};
        _ref1 = this.config.chapters;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          chapter = _ref1[_i];
          _results.push((function() {
            var _j, _len1, _ref2, _results1;
            _ref2 = chapter.sections;
            _results1 = [];
            for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
              section = _ref2[_j];
              if (!section.page || (this.pages[section.page] != null)) {
                continue;
              }
              this.pages[section.page] = section;
              _results1.push(section.built = false);
            }
            return _results1;
          }).call(this));
        }
        return _results;
      };

      StardogtocPlugin.prototype.buildPage = function(file) {
        var $, changed, cheerio, config, name, page, tag;
        name = file.attributes.basename;
        page = this.pages[name];
        if (!page || page.built || file.attributes.outExtension !== 'html') {
          return;
        }
        console.log('buildPage', name);
        page.built = true;
        page.url = file.attributes.url;
        page.subsections = [];
        cheerio = require('cheerio');
        $ = cheerio.load(file.attributes.contentRendered);
        tag = this.config.subsectionSelector;
        config = this.config;
        changed = false;
        $(tag).each(function(index, elem) {
          var $th, id, obj, title;
          $th = $(this);
          title = $th.text();
          id = $th.attr('id');
          if (!id && config.addHeaderIds) {
            $th.attr('id', config.headerIdPrefix + title.replace(/[^a-zA-Z0-9]/g, '-').replace(/^-/, '').replace(/-+/, '-'));
            changed = true;
          }
          id = $th.attr('id');
          obj = {
            title: title,
            id: id,
            url: page.url
          };
          if (id) {
            obj.url += '#' + id;
          }
          return page.subsections.push(obj);
        });
        if (changed) {
          return file.attributes.contentRendered = $.html();
        }
      };

      StardogtocPlugin.prototype.buildTocHtml = function() {
        var ch, chapter, html, section, subsection, text, _i, _j, _k, _len, _len1, _len2, _ref1, _ref2, _ref3;
        this.built = true;
        this.tocHtml = '';
        html = '';
        _ref1 = this.config.chapters;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          chapter = _ref1[_i];
          ch = '';
          ch += "<h2>" + chapter.title + "</h2>";
          ch += "<p>" + chapter.subtitle + "</p>";
          _ref2 = chapter.sections;
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            section = _ref2[_j];
            ch += "<h3><a href=\"" + section.url + "\">" + section.title + "</a></h3>";
            text = section.text ? section.text : '';
            ch += "<p>" + text + "</p>";
            if (section.subsections && section.subsections.length) {
              ch += "<ol class=\"chapter-toc\">";
              _ref3 = section.subsections;
              for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
                subsection = _ref3[_k];
                ch += "<li><a href=\"" + subsection.url + "\">" + subsection.title + "</a></li>";
              }
              ch += "</ol><p></p>";
            }
          }
          html += ch;
        }
        return this.tocHtml = html;
      };

      StardogtocPlugin.prototype.renderBefore = function(opts) {
        return this.buildPages();
      };

      StardogtocPlugin.prototype.render = function(opts) {
        var content, file, inExtension, outExtension, templateData;
        return inExtension = opts.inExtension, outExtension = opts.outExtension, templateData = opts.templateData, file = opts.file, content = opts.content, opts;
      };

      StardogtocPlugin.prototype.renderDocument = function(opts) {
        var file, name;
        file = opts.file;
        if (file.type !== 'document' || opts.extension !== 'html' || file.attributes.sdTocProcessed) {
          return;
        }
        file.attributes.sdTocProcessed = true;
        name = file.attributes.basename;
        if (!this.pages[name] || !this.config.addHeaderIds) {

        }
      };

      StardogtocPlugin.prototype.writeBefore = function(opts) {
        var documents, model, needsToc, _i, _j, _len, _len1, _ref1, _results;
        documents = this.docpad.getCollection('documents');
        needsToc = [];
        _ref1 = documents.models;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          model = _ref1[_i];
          this.buildPage(model);
          if (this.config.regex.test(model.attributes.contentRendered)) {
            needsToc.push(model);
          }
        }
        this.buildTocHtml();
        _results = [];
        for (_j = 0, _len1 = needsToc.length; _j < _len1; _j++) {
          model = needsToc[_j];
          _results.push(model.attributes.contentRendered = model.attributes.contentRendered.replace(this.config.regex, this.tocHtml));
        }
        return _results;
      };

      return StardogtocPlugin;

    })(BasePlugin);
  };

}).call(this);

/*
//@ sourceMappingURL=stardogtoc.plugin.map
*/
